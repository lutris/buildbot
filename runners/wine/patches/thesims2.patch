--- a/dlls/d3d9/d3d9_main.c	
+++ a/dlls/d3d9/d3d9_main.c	
@@ -76,6 +76,62 @@ HRESULT WINAPI DECLSPEC_HOTPATCH Direct3DCreate9Ex(UINT sdk_version, IDirect3D9E
     return D3D_OK;
 }
 
+static int uisv_refcount;
+
+static HRESULT WINAPI uisv_QueryInterface(void *iface, REFIID riid, void **out)
+{
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI uisv_AddRef(void *iface)
+{
+    ULONG refcount = InterlockedIncrement(&uisv_refcount);
+    return refcount;
+}
+
+static ULONG WINAPI uisv_Release(void *iface)
+{
+    ULONG refcount = InterlockedDecrement(&uisv_refcount);
+    return refcount;
+}
+
+static HRESULT WINAPI uisv_DefaultUnimp()
+{
+    FIXME("uisv_DefaultUnimp() called: will crash\n");
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI uisv_1par(DWORD p1)
+{
+    FIXME("uisv_4par called\n");
+    return S_OK;
+}
+
+static HRESULT WINAPI uisv_4par(DWORD p1, DWORD p2, DWORD p3, DWORD p4)
+{
+    FIXME("uisv_4par called\n");
+    return S_OK;
+}
+
+static HRESULT WINAPI uisv_5par(DWORD p1, DWORD p2, DWORD p3, DWORD p4, DWORD p5)
+{
+    FIXME("uisv_5par called\n");
+    return S_OK;
+}
+
+
+static const void *undefinedInternalShaderValidator_vtbl[] =
+{
+    /* IUnknown */
+    uisv_QueryInterface,
+    uisv_AddRef,
+    uisv_Release,
+    /* interface */
+    uisv_4par,
+    uisv_5par,
+    uisv_1par
+ };
+
 /*******************************************************************
  *       Direct3DShaderValidatorCreate9 (D3D9.@)
  *
@@ -85,9 +141,9 @@ HRESULT WINAPI DECLSPEC_HOTPATCH Direct3DCreate9Ex(UINT sdk_version, IDirect3D9E
 void* WINAPI Direct3DShaderValidatorCreate9(void)
 {
     static int once;
-
+    static void *vtbl_addr=undefinedInternalShaderValidator_vtbl;
     if (!once++) FIXME("stub\n");
-    return NULL;
+    return &vtbl_addr;
 }
 
 /***********************************************************************
--- a/dlls/d3d9/d3d9_private.h	
+++ a/dlls/d3d9/d3d9_private.h	
@@ -40,7 +40,7 @@
 #include "d3d9.h"
 #include "wine/wined3d.h"
 
-#define D3D9_MAX_VERTEX_SHADER_CONSTANTF 256
+#define D3D9_MAX_VERTEX_SHADER_CONSTANTF 1024
 #define D3D9_MAX_TEXTURE_UNITS 20
 
 #define D3DPRESENTFLAGS_MASK 0x00000fffu
--- a/dlls/wined3d/shader.c	
+++ a/dlls/wined3d/shader.c	
@@ -427,14 +427,14 @@ static void shader_set_limits(struct wined3d_shader *shader)
     vs_limits[] =
     {
         /* min_version, max_version, sampler, constant_int, constant_float, constant_bool, packed_output, packed_input */
-        {WINED3D_SHADER_VERSION(1, 0), WINED3D_SHADER_VERSION(1, 1), { 0,  0, 256,  0, 12,  0}},
-        {WINED3D_SHADER_VERSION(2, 0), WINED3D_SHADER_VERSION(2, 1), { 0, 16, 256, 16, 12,  0}},
+        {WINED3D_SHADER_VERSION(1, 0), WINED3D_SHADER_VERSION(1, 1), { 0,  0, /*256 */1024,  0, 12,  0}},
+        {WINED3D_SHADER_VERSION(2, 0), WINED3D_SHADER_VERSION(2, 1), { 0, 16, /*256 */1024, 16, 12,  0}},
         /* DX10 cards on Windows advertise a D3D9 constant limit of 256
          * even though they are capable of supporting much more (GL
          * drivers advertise 1024). d3d9.dll and d3d8.dll clamp the
          * wined3d-advertised maximum. Clamp the constant limit for <= 3.0
          * shaders to 256. */
-        {WINED3D_SHADER_VERSION(3, 0), WINED3D_SHADER_VERSION(3, 0), { 4, 16, 256, 16, 12,  0}},
+        {WINED3D_SHADER_VERSION(3, 0), WINED3D_SHADER_VERSION(3, 0), { 4, 16, /*256*/1024, 16, 12,  0}},
         {WINED3D_SHADER_VERSION(4, 0), WINED3D_SHADER_VERSION(4, 0), {16,  0,   0,  0, 16,  0}},
         {0}
     },
@@ -743,8 +743,10 @@ static HRESULT shader_get_registers_used(struct wined3d_shader *shader, const st
                         break;
                     }
                     if (shader_version.type == WINED3D_SHADER_TYPE_PIXEL && shader_version.major == 3
-                            && semantic->usage == WINED3D_DECL_USAGE_POSITION && !semantic->usage_idx)
+                            && semantic->usage == WINED3D_DECL_USAGE_POSITION && !semantic->usage_idx) {
+			WARN("shader_version.type == WINED3D_SHADER_TYPE_PIXEL && shader_version.major == 3 ...\n");
                         return WINED3DERR_INVALIDCALL;
+		    }
                     reg_maps->input_registers |= 1u << reg_idx;
                     shader_signature_from_semantic(&input_signature_elements[reg_idx], semantic);
                     break;
@@ -886,8 +888,10 @@ static HRESULT shader_get_registers_used(struct wined3d_shader *shader, const st
             for (i = 0; i < ins.dst_count; ++i)
             {
                 if (!shader_record_register_usage(shader, reg_maps, &ins.dst[i].reg,
-                        shader_version.type, constf_size))
+                        shader_version.type, constf_size)) {
+                    WARN("!shader_record_register_usage\n");
                     return WINED3DERR_INVALIDCALL;
+		}
 
                 if (shader_version.type == WINED3D_SHADER_TYPE_VERTEX)
                 {
@@ -1061,8 +1065,10 @@ static HRESULT shader_get_registers_used(struct wined3d_shader *shader, const st
 
             if (ins.predicate)
                 if (!shader_record_register_usage(shader, reg_maps, &ins.predicate->reg,
-                        shader_version.type, constf_size))
+                        shader_version.type, constf_size)) {
+		    WARN("!shader_record_register_usage (2)");
                     return WINED3DERR_INVALIDCALL;
+		}
 
             for (i = 0; i < ins.src_count; ++i)
             {
@@ -1070,14 +1076,18 @@ static HRESULT shader_get_registers_used(struct wined3d_shader *shader, const st
                 struct wined3d_shader_register reg = ins.src[i].reg;
 
                 if (!shader_record_register_usage(shader, reg_maps, &ins.src[i].reg,
-                        shader_version.type, constf_size))
+                        shader_version.type, constf_size)) {
+                    WARN("!shader_record_register_usage (3)\n");
                     return WINED3DERR_INVALIDCALL;
+		}
                 while (count)
                 {
                     ++reg.idx[0].offset;
                     if (!shader_record_register_usage(shader, reg_maps, &reg,
-                            shader_version.type, constf_size))
+                            shader_version.type, constf_size)) {
+			WARN("!shader_record_register_usage (4)");  
                         return WINED3DERR_INVALIDCALL;
+		    }
                     --count;
                 }
 
@@ -1090,7 +1100,7 @@ static HRESULT shader_get_registers_used(struct wined3d_shader *shader, const st
                         shader->u.ps.color0_reg = ins.src[i].reg.idx[0].offset;
                     }
                 }
-            }
+            } //for (i = 0; i < ins.src_count; ++i)
         }
     }
     reg_maps->loop_depth = max_loop_depth;
@@ -3347,8 +3337,10 @@
         shader_trace_init(fe, shader->frontend_data);
 
     /* Second pass: figure out which registers are used, what the semantics are, etc. */
-    if (FAILED(hr = shader_get_registers_used(shader, float_const_count)))
+    if (FAILED(hr = shader_get_registers_used(shader, float_const_count))) {
+	    	WARN("Error shader_get_registers_used\n");
         return hr;
+    }
 
     if (reg_maps->shader_version.type != type)
     {
--- a/dlls/wined3d/utils.c	
+++ a/dlls/wined3d/utils.c	
@@ -4270,7 +4270,7 @@ DWORD get_flexible_vertex_size(DWORD d3dvtVertexType) {
         case WINED3DFVF_XYZB4:  size += 7 * sizeof(float); break;
         case WINED3DFVF_XYZB5:  size += 8 * sizeof(float); break;
         case WINED3DFVF_XYZW:   size += 4 * sizeof(float); break;
-        default: ERR("Unexpected position mask\n");
+        default: ERR("Unexpected position mask: 0x%x\n", d3dvtVertexType & WINED3DFVF_POSITION_MASK);
     }
     for (i = 0; i < numTextures; i++) {
         size += GET_TEXCOORD_SIZE_FROM_FVF(d3dvtVertexType, i) * sizeof(float);
--- a/dlls/wined3d/wined3d_private.h
+++ a/dlls/wined3d/wined3d_private.h
@@ -659,7 +659,7 @@ enum wined3d_shader_conditional_op
 #define WINED3D_MAX_CBS 15
 #define WINED3D_MAX_CONSTS_B 16
 #define WINED3D_MAX_CONSTS_I 16
-#define WINED3D_MAX_VS_CONSTS_F 256
+#define WINED3D_MAX_VS_CONSTS_F 1024
 #define WINED3D_MAX_PS_CONSTS_F 224
 
 /* FIXME: This needs to go up to 2048 for
