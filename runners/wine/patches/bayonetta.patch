diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
index 0381e55..6c32a09 100644
--- a/dlls/ntdll/file.c
+++ b/dlls/ntdll/file.c
@@ -865,7 +865,11 @@ NTSTATUS WINAPI NtReadFile(HANDLE hFile, HANDLE hEvent,
             status = STATUS_INVALID_PARAMETER;
             goto done;
         }
-
+        if (async_read) {
+            status = register_async_file_read( hFile, hEvent, apc, apc_user, io_status,
+                                               buffer, total, length, FALSE );
+            goto err;
+        }
         if (offset && offset->QuadPart != FILE_USE_FILE_POINTER_POSITION)
         {
             /* async I/O doesn't make sense on regular files */
@@ -1175,6 +1179,38 @@ static NTSTATUS set_pending_write( HANDLE device )
     return status;
 }
 
+/* register an async I/O for a file write; helper for NtWriteFile */
+static NTSTATUS register_async_file_write( HANDLE handle, HANDLE event,
+                                          PIO_APC_ROUTINE apc, void *apc_user,
+                                          IO_STATUS_BLOCK *iosb, void *buffer,
+                                          ULONG already, ULONG length )
+{
+    struct async_fileio_write *fileio;
+    NTSTATUS status;
+
+    fileio = (struct async_fileio_write *)alloc_fileio( sizeof(*fileio), FILE_AsyncWriteService, handle );
+    if (!fileio)
+    {
+        return STATUS_NO_MEMORY;
+    }
+    fileio->already = already;
+    fileio->count = length;
+    fileio->buffer = buffer;
+
+    SERVER_START_REQ( register_async )
+    {
+        req->type   = ASYNC_TYPE_WRITE;
+        req->count  = length;
+        req->async  = server_async( handle, &fileio->io, event, apc, apc_user, iosb );
+        status = wine_server_call( req );
+    }
+    SERVER_END_REQ;
+
+    if (status != STATUS_PENDING) RtlFreeHeap( GetProcessHeap(), 0, fileio );
+    return status;
+}
+
+
 /******************************************************************************
  *  NtWriteFile					[NTDLL.@]
  *  ZwWriteFile					[NTDLL.@]
@@ -1275,6 +1311,14 @@ NTSTATUS WINAPI NtWriteFile(HANDLE hFile, HANDLE hEvent,
                 goto done;
             }
 
+        if (async_write)
+        {
+            status = register_async_file_write(hFile, hEvent, apc, apc_user, io_status,
+                                               buffer, total, length);
+            goto err;
+        }
+
+
             /* async I/O doesn't make sense on regular files */
             while ((result = pwrite( unix_handle, buffer, length, off )) == -1)
             {
@@ -1336,28 +1380,9 @@ NTSTATUS WINAPI NtWriteFile(HANDLE hFile, HANDLE hEvent,
 
         if (async_write)
         {
-            struct async_fileio_write *fileio;
-
-            fileio = (struct async_fileio_write *)alloc_fileio( sizeof(*fileio), FILE_AsyncWriteService, hFile );
-            if (!fileio)
-            {
-                status = STATUS_NO_MEMORY;
-                goto err;
-            }
-            fileio->already = total;
-            fileio->count = length;
-            fileio->buffer = buffer;
-
-            SERVER_START_REQ( register_async )
-            {
-                req->type   = ASYNC_TYPE_WRITE;
-                req->count  = length;
-                req->async  = server_async( hFile, &fileio->io, hEvent, apc, apc_user, io_status );
-                status = wine_server_call( req );
-            }
-            SERVER_END_REQ;
 
-            if (status != STATUS_PENDING) RtlFreeHeap( GetProcessHeap(), 0, fileio );
+            status = register_async_file_write(hFile, hEvent, apc, apc_user, io_status,
+                                               buffer, total, length);
             goto err;
         }
         else  /* synchronous write, wait for the fd to become ready */
diff --git a/dlls/kernel32/file.c b/dlls/kernel32/file.c
index 3e93b0d..16e35b0 100644
--- a/dlls/kernel32/file.c
+++ b/dlls/kernel32/file.c
@@ -455,6 +455,11 @@ BOOL WINAPI ReadFile( HANDLE hFile, LPVOID buffer, DWORD bytesToRead,
     if (status != STATUS_PENDING && bytesRead)
         *bytesRead = io_status->Information;
 
+    if (overlapped != NULL && !status) {
+        SetLastError( RtlNtStatusToDosError(STATUS_PENDING) );
+        return TRUE;
+    }
+
     if (status == STATUS_END_OF_FILE)
     {
         if (overlapped != NULL)
@@ -579,6 +584,11 @@ BOOL WINAPI WriteFile( HANDLE hFile, LPCVOID buffer, DWORD bytesToWrite,
     if (status != STATUS_PENDING && bytesWritten)
         *bytesWritten = piosb->Information;
 
+    if (overlapped != NULL && !status) {
+        SetLastError( RtlNtStatusToDosError(STATUS_PENDING) );
+        return TRUE;
+    }
+
     if (status && status != STATUS_TIMEOUT)
     {
         SetLastError( RtlNtStatusToDosError(status) );
